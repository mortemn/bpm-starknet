%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin, BitwiseBuiltin
from starkware.cairo.common.registers import get_label_location
from starkware.cairo.common.bitwise import bitwise_and
from starknet_felt_packing.contracts.bits_manipulation import external as bits_manipulation
from starkware.cairo.common.alloc import alloc

@view
func getFillFromSquare(square : felt) -> (fill : felt):
    let (colors_address) = get_label_location(colors)
    return ([colors_address + square])
    colors:
    dw '#ffffff'
    dw '#aaaaaa'
    dw '#555555'
    dw '#000000'
    dw '#ffff55'
    dw '#00aa00'
    dw '#55ff55'
    dw '#ff5555'
    dw '#aa0000'
    dw '#aa5500'
    dw '#aa00aa'
    dw '#ff55ff'
    dw '#55ffff'
    dw '#00aaaa'
    dw '#0000aa'
    dw '#5555ff'
end

@view
func getSquareFromMap{
        bitwise_ptr : BitwiseBuiltin*,
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr,
    }(bitmap : felt, index) -> (square : felt):
    let (square) = bits_manipulation.actual_get_element_at(bitmap, index, 4)
    return (square)
end

@view
func generateRows{
        bitwise_ptr : BitwiseBuiltin*,
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr,
    }(bitmap : felt, rows : felt, x, y):
    if x == 64:
        return (rows)
    end
    let (pixelRow : felt*) = alloc()
    rows = ap
    assert pixelRow[0] = generateRow(bitmap, x, y)
    assert pixelRow[1] = generateRow(bitmap, x + 1, y)
    assert pixelRow[2] = generateRow(bitmap, x + 1, y)
    assert pixelRow[3] = generateRow(bitmap, x + 3, y)
    assert pixelRow[4] = generateRow(bitmap, x + 4, y)
    assert pixelRow[5] = generateRow(bitmap, x + 5, y)
    assert pixelRow[6] = generateRow(bitmap, x + 6, y)
    assert pixelRow[7] = generateRow(bitmap, x + 7, y)


    [rows] = insertRow(rows, pixelRow)
    return generateRows(bitmap, rows, x+8, y+1)
end

@view
func generateRow{
        bitwise_ptr : BitwiseBuiltin*,
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr,
    }(bitmap : felt, i, y) -> (row_len : felt, row : felt*):
    let (row : felt*) = alloc()
    let square = _getFillFromSquare(bitmap, i)
    assert row[0] = '<rect fill="'
    assert row[1] = getFillFromSquare(square)
    assert row[2] = '" x="0" y="'
    assert row[3] = y
    assert row[4] = '"width="1" height="1" />'

    return (5, row)
end

@view
func insertRow{
    bitwise_ptr : BitwiseBuiltin*,
    syscall_ptr : felt*,
    pedersen_ptr : HashBuiltin*,
    range_check_ptr,
}(rows : felt, pixelRow : felt) -> (res_len : felt, res : felt*):
    let (res : felt*) = alloc()
    assert row[0] = rows
    assert row[1] = pixelRow

    return (2, res)
end


@view
func renderSvg{
        bitwise_ptr : BitwiseBuiltin*,
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr,
    }(bitmap : felt, x, y) -> (svg : felt):

    return renderSvg(bitmap, x+8, y+1)
end
